{"ast":null,"code":"var _jsxFileName = \"/workspaces/IngSoft/ing_soft_frontend/src/pages/SceneList.js\",\n  _s = $RefreshSig$();\n// src/SceneList.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './SceneList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SceneList = () => {\n  _s();\n  const [scenes, setScenes] = useState([]);\n  const [editIndex, setEditIndex] = useState(null);\n  const [newDescription, setNewDescription] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Recupera tutte le scene dal server\n    fetch('http://localhost:5000/scenes').then(response => response.json()).then(data => setScenes(data)).catch(error => console.error('Error fetching scenes:', error));\n  }, []);\n  const handleEditClick = (index, description) => {\n    setEditIndex(index);\n    setNewDescription(description);\n  };\n  const handleDescriptionChange = e => {\n    setNewDescription(e.target.value);\n  };\n  const handleSaveClick = title => {\n    // Invia la richiesta PUT per aggiornare la descrizione della scena\n    fetch(`http://localhost:5000/scenes/update/${title}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        description: newDescription\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(() => {\n      // Aggiorna la descrizione localmente\n      const updatedScenes = scenes.map((scene, index) => index === editIndex ? {\n        ...scene,\n        description: newDescription\n      } : scene);\n      setScenes(updatedScenes);\n      setEditIndex(null);\n      setNewDescription('');\n    }).catch(error => console.error('Error updating scene:', error));\n  };\n  const handleLogout = () => {\n    // Logica di logout, se necessario\n    // Reindirizza alla schermata home\n    navigate('/');\n  };\n  const handleCreateScene = () => {\n    navigate('/create-scene');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scene-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleLogout,\n        className: \"logout-button\",\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateScene,\n      className: \"create-scene-button\",\n      children: \"Crea Scena\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lista delle Scene\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), scenes.map((scene, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scene-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: scene.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), editIndex === index ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: newDescription,\n          onChange: handleDescriptionChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSaveClick(scene.title),\n          children: \"Salva\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: scene.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleEditClick(index, scene.description),\n        children: \"Modifica\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, scene._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(SceneList, \"WIa3KWBKTE7uSMNSVERuF98gQAk=\", false, function () {\n  return [useNavigate];\n});\n_c = SceneList;\nexport default SceneList;\nvar _c;\n$RefreshReg$(_c, \"SceneList\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","SceneList","_s","scenes","setScenes","editIndex","setEditIndex","newDescription","setNewDescription","navigate","fetch","then","response","json","data","catch","error","console","handleEditClick","index","description","handleDescriptionChange","e","target","value","handleSaveClick","title","method","headers","body","JSON","stringify","ok","Error","updatedScenes","map","scene","handleLogout","handleCreateScene","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","_id","_c","$RefreshReg$"],"sources":["/workspaces/IngSoft/ing_soft_frontend/src/pages/SceneList.js"],"sourcesContent":["// src/SceneList.js\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './SceneList.css';\n\nconst SceneList = () => {\n  const [scenes, setScenes] = useState([]);\n  const [editIndex, setEditIndex] = useState(null);\n  const [newDescription, setNewDescription] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Recupera tutte le scene dal server\n    fetch('http://localhost:5000/scenes')\n      .then(response => response.json())\n      .then(data => setScenes(data))\n      .catch(error => console.error('Error fetching scenes:', error));\n  }, []);\n\n  const handleEditClick = (index, description) => {\n    setEditIndex(index);\n    setNewDescription(description);\n  };\n\n  const handleDescriptionChange = (e) => {\n    setNewDescription(e.target.value);\n  };\n\n  const handleSaveClick = (title) => {\n    // Invia la richiesta PUT per aggiornare la descrizione della scena\n    fetch(`http://localhost:5000/scenes/update/${title}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ description: newDescription }),\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(() => {\n        // Aggiorna la descrizione localmente\n        const updatedScenes = scenes.map((scene, index) =>\n          index === editIndex ? { ...scene, description: newDescription } : scene\n        );\n        setScenes(updatedScenes);\n        setEditIndex(null);\n        setNewDescription('');\n      })\n      .catch(error => console.error('Error updating scene:', error));\n  };\n\n  const handleLogout = () => {\n    // Logica di logout, se necessario\n    // Reindirizza alla schermata home\n    navigate('/');\n  };\n\n  const handleCreateScene = () => {\n    navigate('/create-scene');\n  };\n\n  return (\n    <div className=\"scene-list-container\">\n      <header className=\"header\">\n        <button onClick={handleLogout} className=\"logout-button\">Logout</button>\n      </header>\n      <button onClick={handleCreateScene} className=\"create-scene-button\">Crea Scena</button>\n      <h1>Lista delle Scene</h1>\n      {scenes.map((scene, index) => (\n        <div key={scene._id} className=\"scene-item\">\n          <h2>{scene.title}</h2>\n          {editIndex === index ? (\n            <div>\n              <textarea\n                value={newDescription}\n                onChange={handleDescriptionChange}\n              />\n              <button onClick={() => handleSaveClick(scene.title)}>Salva</button>\n            </div>\n          ) : (\n            <p>{scene.description}</p>\n          )}\n          <button onClick={() => handleEditClick(index, scene.description)}>Modifica</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default SceneList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}