{"ast":null,"code":"var _jsxFileName = \"/workspaces/IngSoft/ing_soft_frontend/src/pages/EditScene.js\",\n  _s = $RefreshSig$();\n// src/EditScene.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom'; // Importa useNavigate invece di useHistory\nimport './Scene.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditScene = () => {\n  _s();\n  const {\n    id\n  } = useParams(); // Parametro URL per l'ID della scena\n  const navigate = useNavigate(); // Utilizza useNavigate per la navigazione\n\n  const [description, setDescription] = useState('');\n  useEffect(() => {\n    // Recupera i dettagli della scena dal server\n    fetch(`http://localhost:5000/scenes/${id}`).then(response => response.json()).then(data => {\n      setDescription(data.description);\n    }).catch(error => {\n      console.error('Error fetching scene details:', error);\n      // Gestione dell'errore o reindirizzamento ad esempio\n    });\n  }, [id]);\n  const handleDescriptionChange = e => {\n    setDescription(e.target.value);\n  };\n  const handleSave = e => {\n    e.preventDefault();\n    const sceneData = {\n      description: description\n    };\n\n    // Invia la richiesta PUT per aggiornare la descrizione della scena\n    fetch(`http://localhost:5000/scenes/update/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(sceneData)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok ' + response.statusText);\n      }\n      return response.json();\n    }).then(data => {\n      console.log('Success:', data);\n      alert('Descrizione della scena aggiornata con successo!');\n      // Reindirizzamento alla pagina principale o ad altre azioni\n      // Esempio di reindirizzamento alla home dopo l'aggiornamento\n      navigate('/'); // Utilizza navigate per reindirizzare\n    }).catch(error => {\n      console.error('Error:', error);\n      alert('Errore nell\\'aggiornamento della descrizione della scena');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scene-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Modifica della scena\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"scene-form\",\n      onSubmit: handleSave,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Descrizione:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"description\",\n          value: description,\n          onChange: handleDescriptionChange,\n          required: true,\n          readOnly: false // Abilita la modifica della descrizione\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"create-button\",\n        children: \"Salva Modifiche\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(EditScene, \"S4gEWCOJ6+46Ap9mVQk2cPmGjP4=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditScene;\nexport default EditScene;\nvar _c;\n$RefreshReg$(_c, \"EditScene\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","jsxDEV","_jsxDEV","EditScene","_s","id","navigate","description","setDescription","fetch","then","response","json","data","catch","error","console","handleDescriptionChange","e","target","value","handleSave","preventDefault","sceneData","method","headers","body","JSON","stringify","ok","Error","statusText","log","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","onChange","required","readOnly","type","_c","$RefreshReg$"],"sources":["/workspaces/IngSoft/ing_soft_frontend/src/pages/EditScene.js"],"sourcesContent":["// src/EditScene.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom'; // Importa useNavigate invece di useHistory\nimport './Scene.css';\n\nconst EditScene = () => {\n  const { id } = useParams(); // Parametro URL per l'ID della scena\n  const navigate = useNavigate(); // Utilizza useNavigate per la navigazione\n\n  const [description, setDescription] = useState('');\n\n  useEffect(() => {\n    // Recupera i dettagli della scena dal server\n    fetch(`http://localhost:5000/scenes/${id}`)\n      .then(response => response.json())\n      .then(data => {\n        setDescription(data.description);\n      })\n      .catch(error => {\n        console.error('Error fetching scene details:', error);\n        // Gestione dell'errore o reindirizzamento ad esempio\n      });\n  }, [id]);\n\n  const handleDescriptionChange = (e) => {\n    setDescription(e.target.value);\n  };\n\n  const handleSave = (e) => {\n    e.preventDefault();\n\n    const sceneData = {\n      description: description,\n    };\n\n    // Invia la richiesta PUT per aggiornare la descrizione della scena\n    fetch(`http://localhost:5000/scenes/update/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(sceneData),\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok ' + response.statusText);\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('Success:', data);\n        alert('Descrizione della scena aggiornata con successo!');\n        // Reindirizzamento alla pagina principale o ad altre azioni\n        // Esempio di reindirizzamento alla home dopo l'aggiornamento\n        navigate('/'); // Utilizza navigate per reindirizzare\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n        alert('Errore nell\\'aggiornamento della descrizione della scena');\n      });\n  };\n\n  return (\n    <div className=\"scene-container\">\n      <h1>Modifica della scena</h1>\n      <form className=\"scene-form\" onSubmit={handleSave}>\n        <div className=\"form-group\">\n          <label htmlFor=\"description\">Descrizione:</label>\n          <textarea\n            id=\"description\"\n            value={description}\n            onChange={handleDescriptionChange}\n            required\n            readOnly={false} // Abilita la modifica della descrizione\n          ></textarea>\n        </div>\n        <button type=\"submit\" className=\"create-button\">Salva Modifiche</button>\n      </form>\n    </div>\n  );\n};\n\nexport default EditScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}